{"version":3,"sources":["components/ColorLightPanels.js","components/PixelColorTest.js","components/AverageColorTest.js","components/media-types/Stage.js","components/media-types/Video.js","components/media-types/DefaultMedia.js","components/Media.js","components/Carousel.js","components/Lines.js","components/Box.js","components/Scene.js","components/Page.js","components/Gallery.js","components/BasicPage.js","App.js","serviceWorker.js","index.js"],"names":["GRID_COLUMNS","GRID_ROWS","PixelColorTest","state","pixel_color_obj","getPixel","imagedata","x","y","position","width","data","r","g","b","a","onCanvasClick","event","rect","target","getBoundingClientRect","Math","round","clientX","left","clientY","top","console","log","canvasData","setState","image","Image","src","canvasContext","this","refs","canvas","getContext","onload","hRatio","vRatio","height","ratio","min","centerShift_x","centerShift_y","drawImage","getImageData","tile_color","Fragment","ref","style","backgroundColor","onClick","React","Component","IMG","AverageColorTest","colorCellFromPixel","cell","colorTable","childNodes","colorObj","i","colorGridHTML","colorGridColumnHTML","j","push","objectFit","ColorLightPanels","props","constructColorPanels","numPanels","colorPanels","THREE","name","geometry","midPoint","colorPanelGroup","numCells","random","grid_size","depth","material","color","side","plane","set","rotation","PI","add","loadImage","image_src","image_loader","ceiling","floor","wall_left","wall_right","_this","texture","needsUpdate","screenGeometry","screenMaterial","map","transparent","screen","box","unloadImage","grid","visible","loop_index","panel","panelGroup","getObjectByName","children","length","red","green","blue","alpha","changeCellColor","TweenMax","delayedCall","setRGB","opacity","userData","z","prevProps","prevState","className","display","Media","animate","delta","requestAnimationFrame","renderer","render","scene","camera","addToScene","obj","antialias","setPixelRatio","shadowMapEnabled","prevPosition","prevRotation","lookAt","ambientLight","box_geo","box_mesh","setSize","component","clientWidth","clientHeight","appendChild","domElement","Video","autoPlay","muted","loop","preload","onLoadedData","onLoad","onError","DefaultMedia","ROOT","window","location","hostname","is_loaded","renderMedia","type","Stage","Carousel","active_index","onSlideClick","index","main_slides","select","Flickity","cellAlign","pageDots","on","change","nav_slides","contain","prevNextButtons","resize","listItemsHTML","mainSlidesHTML","bind","title","tech","use_stage","description","role","url","href","Lines","constructGridCurves","horizontals","verticals","concat","point_a","point_b","point_c","point_d","path","randomNumberGenerator","vertexShader","fragmentShader","initAni","particles_position","particles","attributes","array","particles_scale","scale","path_index","spacedPositions","getSpacedPoints","base_index","delay","from","pos_index","to","restingAni","array_size","particlePositions","Float32Array","NUM_PARTICLES_PER_LINE","particleScales","particleOpacities","setAttribute","uniforms","value","Box","calculateCameraPosition","cameraPositionFromBoxOrigin","cameraRotation","worldPosition","localToWorld","functions","moveCameraTo","receiveShadow","light","castShadow","colors","TimelineLite","repeat","text_geo","font","size","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","text_mat","text","isActive","Scene","datgui","copy","ease","Expo","easeInOut","easeOut","onUpdateDatGui","newData","devicePixelRatio","innerWidth","innerHeight","controls","OrbitControls","load","isMenuOpen","match","params","box_title","boxHTML","PAGES","is_active","toLowerCase","key","parseInt","Page","DATA","projects","Gallery","itemsHTML","featured","document","getElementsByTagName","classList","gallery","App","onMenuToggleClick","menuItemsHTML","exact","BasicPage","id","aria-labelledby","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fab7e74c.chunk.js","sourcesContent":["import React from 'react';\nimport * as THREE from 'three';\nimport { TweenMax } from 'gsap';\n\nvar GRID_COLUMNS;\nvar GRID_ROWS;\n\n/*\n maybe each of the cells gets userData: {canvas_x, canvas_y, distance_from_screen}\n*/\n\nclass ColorLightPanels extends React.Component {\n\n\n\tconstructor(props) {\n        super(props);\n\n        GRID_COLUMNS = props.grid_size.width;\n        GRID_ROWS = props.grid_size.height;\n\n        // 1. set up grid structre\n        this.ceiling = new THREE.Group()\n        this.floor = new THREE.Group()\n        this.wall_right = new THREE.Group()\n        this.wall_left = new THREE.Group()\n\n        this.grid = new THREE.Group();\n        this.grid.add(this.ceiling, this.floor, this.wall_right, this.wall_left);\n        this.grid.position.set(0, -GRID_ROWS/2, 0)\n        this.grid.visible = false;\n\n        props.box.add(this.grid);\n\n        // 2. set size of walls\n        this.ceiling.userData = { width: GRID_COLUMNS };\n        this.floor.userData = { width: GRID_COLUMNS };\n        this.wall_right.userData = { width: GRID_ROWS };\n        this.wall_left.userData = { width: GRID_ROWS };\n\n        // 3. rotate and position grid to form a box\n        this.ceiling.position.set(0, GRID_ROWS, 0);\n\n        this.wall_right.rotation.z = Math.PI / 2;\n        this.wall_right.position.set(GRID_COLUMNS / -2, GRID_ROWS / 2, (GRID_COLUMNS-GRID_ROWS) / 2);\n\n        this.wall_left.rotation.z = Math.PI / 2;\n        this.wall_left.position.set(GRID_COLUMNS / 2, GRID_ROWS / 2, (GRID_COLUMNS-GRID_ROWS) / 2)\n\n\n        // 3. construct grid lines and color panels\n        for (var i in this.grid.children) {\n            var width = this.grid.children[i].userData.width;\n            //this.grid.children[i].add( new THREE.GridHelper(width, width, \"red\") );\n\n            this.grid.children[i].add( this.constructColorPanels(width) );\n        }\n\n        var screenGeometry = new THREE.PlaneBufferGeometry(GRID_COLUMNS, GRID_ROWS);\n        var screenMaterial = new THREE.MeshBasicMaterial( {color: \"black\", side: THREE.FrontSide} );\n        this.screen = new THREE.Mesh( screenGeometry, screenMaterial );\n        this.screen.position.set(0, 0, (GRID_COLUMNS / 2) - 0.1);\n        this.screen.rotation.y = Math.PI;\n        props.box.add(this.screen);\n\n    \n    }\n\n    componentDidMount() {\n        this.grid.visible = true;\n        this.loadImage();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // 1. make grid visible\n        this.grid.visible = true;\n\n        // 2. load image if new image, remove image if no image\n        if (!this.props.image_src)\n            this.unloadImage();\n        else if (prevProps.image_src != this.props.image_src)\n            this.loadImage();\n        \n\n    }\n\n\n    constructColorPanels = (numPanels) => {\n\n        var colorPanels = new THREE.Group();\n        colorPanels.name = \"color panels\";\n\n        var geometry = new THREE.PlaneBufferGeometry();\n        var midPoint = numPanels / 2;\n        var halfSize = .5;\n\n        for( var i = 0; i < numPanels; i++) {\n            var colorPanelGroup = new THREE.Group();\n            var numCells = Math.round(Math.random() * (this.props.grid_size.depth -1)) + 1; //random int between 1 and numPanels\n            \n            for ( var j = 0; j < numCells - 1; j++) {\n                var material = new THREE.MeshBasicMaterial( {color: \"black\", side: THREE.DoubleSide} ); //need to make a new material for ever cell because we modify each cell invidually\n                var plane = new THREE.Mesh( geometry, material );\n    \n                plane.position.set( i - midPoint + halfSize, 0, midPoint - halfSize - j);\n                plane.rotation.x = Math.PI / 2;\n\n                colorPanelGroup.add( plane );\n            }\n\n\n            colorPanels.add( colorPanelGroup );\n        }\n        \n        return colorPanels;\n    }\n\n    loadImage = () => {\n\n\t\t// 1. create image object\n\t\tvar image = new Image();\n\t\timage.src = this.props.image_src;\n\n\t\t// 2. add image to canvas (same size as grid) and fit image inside canvas and center\n\t\tvar canvasContext = this.refs.image_loader.getContext(\"2d\");\n\t\timage.onload = () => {\n\t\t\tvar hRatio = GRID_COLUMNS / image.width;\n\t\t\tvar vRatio = GRID_ROWS / image.height;\n\t\t\tvar ratio  = Math.min ( hRatio, vRatio );\n\t\t\tvar centerShift_x = ( GRID_COLUMNS - image.width*ratio ) / 2;\n\t\t\tvar centerShift_y = ( GRID_ROWS - image.height*ratio ) / 2; \n\n\t\t\tcanvasContext.drawImage(image, 0, 0, image.width, image.height,\n\t\t\t\tcenterShift_x, centerShift_y, image.width*ratio, image.height*ratio);\n\n\t\t\t// 3. get average color of the perimeter\n            var canvasData = canvasContext.getImageData( 0, 0, GRID_COLUMNS, GRID_ROWS );\n            for (var i = 0; i < GRID_COLUMNS; i++) {\n                this.colorCellFromPixel(canvasData, i, i, 0, this.ceiling);\n                this.colorCellFromPixel(canvasData, i, i, GRID_ROWS - 1, this.floor);\n            }\n\n            for (var i = 0; i < GRID_ROWS; i++) {\n                this.colorCellFromPixel(canvasData, i, 0, i, this.wall_left) //left\n                this.colorCellFromPixel(canvasData, i, GRID_COLUMNS - 1, i, this.wall_right) //right\n            }\n\n        }\n        \n        // 3. add image to scene\n        //var loader = new THREE.TextureLoader();\n        // var screenGeometry = new THREE.PlaneBufferGeometry(GRID_COLUMNS, GRID_ROWS);\n        // var screenMaterial = new THREE.MeshBasicMaterial({\n        //     map: loader.load(this.props.image_src),\n        //     side: THREE.FrontSide,\n        //     transparent: true\n        // });\n        // var screen = new THREE.Mesh( screenGeometry, screenMaterial );\n        // screen.position.set(0, 0, (GRID_COLUMNS / 2) - 0.1);\n        // screen.rotation.y = Math.PI;\n        // this.props.box.add(screen);\n\n        var _this = this;\n\n        this.refs.image.onload = function(event) {\n            var texture = new THREE.Texture( this );\n            texture.needsUpdate = true;\n\n            var screenGeometry = new THREE.PlaneBufferGeometry(GRID_COLUMNS, GRID_ROWS);\n            var screenMaterial = new THREE.MeshBasicMaterial({\n                map: texture,\n                side: THREE.FrontSide,\n                transparent: true\n            });\n            var screen = new THREE.Mesh( screenGeometry, screenMaterial );\n            screen.position.set(0, 0, (GRID_COLUMNS / 2) - 0.1);\n            screen.rotation.y = Math.PI;\n            _this.props.box.add(screen);\n        }\n    }\n\n    unloadImage = () => {\n        // console.log(this.grid.children, this.grid.getObjectByName( \"color panels\"));\n        // for (var i in this.grid.children) {\n        //     var panel = this.grid.children[i].getObjectByName( \"color panels\");\n        //     var \n        // }\n\n        this.grid.visible = false;\n    }\n\n    colorCellFromPixel = (canvasData, loop_index, x, y, panel) => {\n        var panel = panel.getObjectByName( \"color panels\" );\n\n        var panelGroup = panel.children[ panel.children.length - loop_index - 1 ];\n\n        var position = ( x + (canvasData.width * y) ) * 4;\n        var red = canvasData.data[ position ] / 255;\n        var green = canvasData.data[ position + 1 ] / 255;\n        var blue = canvasData.data[ position + 2 ] / 255;\n        var alpha = canvasData.data[ position + 3 ] / 255;\n\n\n        for (var i in panelGroup.children) {\n            var cell = panelGroup.children[i];\n            changeCellColor(i, cell);\n\n        }\n\n        function changeCellColor(i, cell) {\n            TweenMax.delayedCall(i * .1 + Math.random(), () => {\n                cell.material.color.setRGB(red, green, blue);\n                cell.material.opacity = alpha;\n            });\n        }\n    }\n\n\n\trender() {\n\n\t\treturn (\n            <React.Fragment>\n                <canvas ref=\"image_loader\" className=\"image-loader\" width={ this.props.grid_size.width } height={ this.props.grid_size.height }></canvas>\n                <img ref=\"image\" style={{display: 'none'}} src={ this.props.image_src } />\n            </React.Fragment>\n\t\t);\t\t\n\t}\n}\n\nexport default ColorLightPanels;","import React from 'react';\n\nconst GRID_COLUMNS = 6;\nconst GRID_ROWS = 4;\n\nclass PixelColorTest extends React.Component {\n\n\tstate = {\n\t\tpixel_color_obj: {}\n\t}\n\n\tcomponentDidMount() {\n\t\t// 1. create image object\n\t\tvar image = new Image;\n\t\timage.src = \"./images/test-image.png\";\n\n\t\t// 2. add image to canvas and fit image inside canvas and center\n\t\tvar canvasContext = this.refs.canvas.getContext(\"2d\");\n\t\timage.onload = () => {\n\t\t\tvar hRatio = this.refs.canvas.width / image.width;\n\t\t\tvar vRatio = this.refs.canvas.height / image.height;\n\t\t\tvar ratio  = Math.min ( hRatio, vRatio );\n\t\t\tvar centerShift_x = ( this.refs.canvas.width - image.width*ratio ) / 2;\n\t\t\tvar centerShift_y = ( this.refs.canvas.height - image.height*ratio ) / 2; \n\n\t\t\tcanvasContext.drawImage(image, 0, 0, image.width, image.height,\n\t\t\t\tcenterShift_x, centerShift_y, image.width*ratio, image.height*ratio);\n\n\t\t\t// 3. get average color of a small rectangle of the canvas\n\t\t\tthis.canvasData = canvasContext.getImageData( 0, 0, this.refs.canvas.width, this.refs.canvas.height );\n\t\t}\n\t}\n\n\tgetPixel = ( imagedata, x, y ) => {\n\n\t\tvar position = ( x + (imagedata.width * y) ) * 4;\n\t\tvar data = imagedata.data;\n\t\treturn { r: data[ position ], g: data[ position + 1 ], b: data[ position + 2 ], a: data[ position + 3 ] };\n\t\n\t}\n\n\tonCanvasClick = (event) => {\n\t\tvar rect = event.target.getBoundingClientRect(); \n\t\tvar x = Math.round(event.clientX - rect.left); \n\t\tvar y = Math.round(event.clientY - rect.top); \n\n\t\tconsole.log(\"Coordinate x: \" + x,  \n\t\t\t\t\t\"Coordinate y: \" + y);\n\n\t\tvar pixel_color_obj = this.getPixel(this.canvasData, x, y);\n\t\tthis.setState({ pixel_color_obj: pixel_color_obj });\n\t}\n\n\trender() {\n\n\t\tvar tile_color = \"rgb( \" + this.state.pixel_color_obj.r + \", \" + this.state.pixel_color_obj.g + \", \" + this.state.pixel_color_obj.b + \", \" + this.state.pixel_color_obj.a + \")\";\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h1>Test Color Extender</h1>\n\t\t\t\t<canvas ref=\"canvas\" width=\"400\" height=\"200\" style={{backgroundColor: 'red'}} onClick={this.onCanvasClick}></canvas>\n\t\t\t\t<div ref=\"calculatedColor\" style={{height: '20px', width: '20px', backgroundColor: tile_color}}></div>\n\t\t\t\t<p>R: { this.state.pixel_color_obj.r } G: { this.state.pixel_color_obj.g } B: { this.state.pixel_color_obj.b }</p>\n\t\t\t</React.Fragment>\n\t\t);\t\t\n\t}\n}\n\nexport default PixelColorTest;\n","import React from 'react';\n\nconst GRID_COLUMNS = 12;\nconst GRID_ROWS = 9;\nconst IMG = \"./images/IMG_2709.jpeg\";\n\nclass AverageColorTest extends React.Component {\n\n\tstate = {\n\t\tpixel_color_obj: {}\n\t}\n\n\tcomponentDidMount() {\n\t\t// 1. create image object\n\t\tvar image = new Image;\n\t\timage.src = IMG;\n\n\t\t// 2. add image to canvas and fit image inside canvas and center\n\t\tvar canvasContext = this.refs.canvas.getContext(\"2d\");\n\t\timage.onload = () => {\n\t\t\tvar hRatio = this.refs.canvas.width / image.width;\n\t\t\tvar vRatio = this.refs.canvas.height / image.height;\n\t\t\tvar ratio  = Math.min ( hRatio, vRatio );\n\t\t\tvar centerShift_x = ( this.refs.canvas.width - image.width*ratio ) / 2;\n\t\t\tvar centerShift_y = ( this.refs.canvas.height - image.height*ratio ) / 2; \n\n\t\t\tcanvasContext.drawImage(image, 0, 0, image.width, image.height,\n\t\t\t\tcenterShift_x, centerShift_y, image.width*ratio, image.height*ratio);\n\n\t\t\t// 3. get average color of the perimeter\n            this.canvasData = canvasContext.getImageData( 0, 0, this.refs.canvas.width, this.refs.canvas.height );\n            for (var i = 0; i < GRID_COLUMNS; i++) {\n                this.colorCellFromPixel(i, 0) //top\n                this.colorCellFromPixel(i, GRID_ROWS - 1) //bottom\n            }\n\n            for (var i = 0; i < GRID_ROWS; i++) {\n                this.colorCellFromPixel(0, i) //left\n                this.colorCellFromPixel(GRID_COLUMNS - 1, i) //right\n            }\n\t\t}\n    }\n\n    colorCellFromPixel = (x, y) => {\n        var row = this.refs.colorTable.childNodes[y];\n        var cell = row.childNodes[x]\n        var colorObj = this.getPixel( this.canvasData, x, y);\n        cell.style.backgroundColor = \"rgb( \" + colorObj.r + \", \" + colorObj.g + \", \" + colorObj.b + \", \" + colorObj.a + \")\";\n    }\n\n\tgetPixel = ( imagedata, x, y ) => {\n\n\t\tvar position = ( x + (imagedata.width * y) ) * 4;\n\t\tvar data = imagedata.data;\n\t\treturn { r: data[ position ], g: data[ position + 1 ], b: data[ position + 2 ], a: data[ position + 3 ] };\n\t\n\t}\n\n\trender() {\n\n        var tile_color = \"rgb( \" + this.state.pixel_color_obj.r + \", \" + this.state.pixel_color_obj.g + \", \" + this.state.pixel_color_obj.b + \", \" + this.state.pixel_color_obj.a + \")\";\n        \n        var colorGridHTML = [];\n        for ( var i = 0; i < GRID_ROWS; i++ ) {\n            var colorGridColumnHTML = [];\n            for ( var j = 0; j < GRID_COLUMNS; j++) {\n                colorGridColumnHTML.push(\n                    <td style={{height: '20px', width: '20px', backgroundColor: tile_color}}></td>\n                )\n            }\n            colorGridHTML.push(\n                <tr>{ colorGridColumnHTML }</tr>\n            )\n        }\n\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{/* <h1>Test Average Color Extender</h1> */}\n\t\t\t\t<canvas ref=\"canvas\" width={ GRID_COLUMNS } height={ GRID_ROWS } style={{backgroundColor: 'red'}}></canvas>\n                <div style={{ position: 'relative'}}>\n                    <table ref=\"colorTable\">{ colorGridHTML }</table>\n                    <img src={IMG} height={ 165 } width={ GRID_COLUMNS * 20 } style={{objectFit: 'contain', position: 'absolute', top: 26, left: 25 }}/>\n                </div>\n\n\t\t\t</React.Fragment>\n\t\t);\t\t\n\t}\n}\n\nexport default AverageColorTest;\n","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport ColorLightPanels from '../ColorLightPanels';\nimport '../../styles/partials/_scene.scss';\n\nimport DATA from '../../data/pages.json';\n\nimport { TweenMax, Expo } from 'gsap/gsap-core';\nimport DatGui, { DatBoolean, DatColor, DatNumber, DatString } from 'react-dat-gui';\nimport 'react-dat-gui/dist/index.css';\n\n\nclass Media extends React.Component {\n\n    state = {\n        grid_size: {\n            width: 18,\n            height: 12,\n            depth: 8\n        },\n    }\n\n\tconstructor(props) {\n        super(props);\n\n        var aspectRatio = 1.333;\n        // 1. set up renderer\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(aspectRatio);\n        \n        this.renderer.shadowMapEnabled = true;\n        this.scene = new THREE.Scene();\n\n        // 2. set up camera\n        \n        this.camera = new THREE.PerspectiveCamera(40, aspectRatio, 1, 100);\n        this.camera.userData = { prevPosition: new THREE.Vector3(), prevRotation: new THREE.Vector3() };\n        this.camera.position.set(0, 0, -16);\n        this.camera.lookAt(0,0,0);\n        this.scene.add(this.camera);\n\n        // 3. maybe turn off when light turns black\n        var ambientLight = new THREE.AmbientLight(\"white\", .15);\n        this.scene.add(ambientLight);\n\n        var box_geo = new THREE.BoxBufferGeometry(this.state.grid_size.width , this.state.grid_size.height, this.state.grid_size.depth);\n        var box_mesh = new THREE.MeshPhongMaterial({color: \"white\", opacity: 0, transparent: true});\n        this.box = new THREE.Mesh(box_geo, box_mesh);\n        this.box.position.set(0,0,0)\n\n        this.scene.add( this.box );\n\n\n\n    }\n\n    componentDidMount() {\n        this.renderer.setSize(this.refs.component.clientWidth, this.refs.component.clientHeight);\n        this.refs.component.appendChild(this.renderer.domElement);\n\n\n        this.animate();\n    }\n\n    componentDidUpdate( prevProps, prevState ) {\n\n    }\n\n    animate = (delta) => {\n        requestAnimationFrame(this.animate);\n        \n        this.renderer.render(this.scene, this.camera);\n    }\n\n    addToScene = (obj) => {\n        this.scene.add( obj );\n    }\n\n\trender() {\n\n\t\treturn (\n\n\t\t\t<div ref=\"component\" className=\"stage\">\n                <ColorLightPanels\n                        box={ this.box }\n                        image_src={ this.props.src }\n                        grid_size={ this.state.grid_size} />\n\n            </div>\n\n\t\t);\t\t\n\t}\n}\n\nexport default Media;","import React from 'react';\n\n\n\nclass Video extends React.Component {\n\n    state = {\n\n    }\n\n\n\trender() {\n\n\n\n\t\treturn (\n\n\t\t\t<video src={ this.props.src } autoPlay muted loop preload='auto' onLoadedData={ this.props.onLoad } onError={ this.props.onError }/>\n\n\t\t);\t\t\n\t}\n}\n\nexport default Video;","import React from 'react';\n\n\n\nclass DefaultMedia extends React.Component {\n\n    state = {\n\n    }\n\n\n\trender() {\n\n\n\n\t\treturn (\n\n\t\t\t<img src={ this.props.src } onLoad={ this.props.onLoad } onError={ this.props.onError }/>\n\n\t\t);\t\t\n\t}\n}\n\nexport default DefaultMedia;","import React from 'react';\n\nimport '../styles/partials/_media.scss';\n\nimport 'react-dat-gui/dist/index.css';\n\n\nimport Stage from './media-types/Stage';\nimport Video from './media-types/Video';\nimport DefaultMedia from './media-types/DefaultMedia';\n\nconst ROOT = (window.location.hostname == \"localhost\") ? \"./portfolio\" : \".\"\n\n\nclass Media extends React.Component {\n\n    state = {\n        is_loaded: false,\n    }\n\n    renderMedia = () => {\n\n        switch (this.props.type) {\n            case \"stage\":\n                return <Stage src={ ROOT + this.props.src }/>;\n            case \"video\":\n                return <Video src={ ROOT + this.props.src } onLoad={ this.onLoad } onError={ this.onError }/>;\n            default: \n                return <DefaultMedia src={ ROOT + this.props.src } onLoad={ this.onLoad } onError={ this.onError }/>;\n        }\n    }\n\n    onLoad = (event) => {\n        console.log(\"here\");\n        this.setState({is_loaded: true});\n    }\n\n    onError = (event) => {\n    }\n\n\trender() {\n\n\t\treturn (\n\n\t\t\t<div ref=\"component\" className={\"media\" + (this.props.type ? \" media--\" + this.props.type : \"\") + (this.state.is_loaded ? \" media--is-loaded\" : \"\")}>\n                <p className=\"response-text\">Loading...</p>\n                { this.renderMedia() }\n            </div>\n\n\t\t);\t\t\n\t}\n}\n\nexport default Media;","import React from 'react';\nimport ColorLightPanels from './ColorLightPanels';\nimport Flickity from 'flickity';\n\nimport Media from './Media';\n\n\nclass Carousel extends React.Component {\n\n    state = {\n        active_index: 0\n    }\n\n    componentDidMount() {\n\n        this.main_slides = new Flickity( this.refs.main_slides , {\n            cellAlign: \"center\",\n            pageDots: false,\n            on: {\n                change: (index) => {\n                    if ( index == this.state.active_index ) return;\n                    this.setState({ active_index: index })\n                    this.nav_slides.select( index );\n                }\n            }\n        });\n\n        this.nav_slides = new Flickity( this.refs.nav_slides , {\n            cellAlign: \"left\",\n            contain: true,\n            prevNextButtons: false,\n            on: {\n                change: (index) => {\n                    if ( index == this.state.active_index ) return;\n                    this.setState({ active_index: index })\n                    this.main_slides.select( index );\n                }\n            }\n        });\n    }\n\n    componentDidUpdate() {\n        this.nav_slides.resize();\n    }\n\n    onSlideClick = (index) => {\n        this.setState({ active_index: index });\n        this.main_slides.select( index );\n    }\n\n\n    render() {\n\n        var listItemsHTML = [];\n        var mainSlidesHTML = [];\n        for (var i in this.props.data) {\n            listItemsHTML.push(\n \n                <button className=\"slide\" onClick={ this.onSlideClick.bind(this, i) }>\n                    <h3>{ this.props.data[i].title }</h3>\n                    <p className=\"tech\">{ this.props.data[ i ].tech }</p>\n                </button>\n            );\n\n            mainSlidesHTML.push(\n                <div className=\"carousel__content\">\n                        <div className=\"carousel__content-image\">\n                            <Media\n                                type={ this.props.use_stage ? \"stage\" : \"\"}\n                                src={ this.props.data[ i ].image }\n                            />\n                        </div>\n\n                        { this.props.data[ i ].description\n                        ?   <div className=\"carousel__content-text\">\n                                <h3>{ this.props.data[ i ].title }</h3>\n                                <p>{ this.props.data[ i ].description }</p>\n                                <p><strong>Role:</strong> { this.props.data[ i ].role }</p>\n\n                                { this.props.data[ i ].url\n                                ?   <a target=\"_blank\" href={ this.props.data[ i ].url }>View</a>\n                                :   null }\n                            </div>\n                        : null }\n                </div>                \n            )\n        }\n\n        \n\n\n\n\t\treturn (\n\t\t\t<div ref=\"component\" className={\"carousel\" + (this.state.active_index > -1 ? \" carousel--show-details\" : \"\")}>\n\n                { this.props.box\n                ?   <ColorLightPanels\n                        box={ this.props.box }\n                        image_src={ this.state.active_index > -1 ? this.props.data[ this.state.active_index ].image : null }\n                        grid_size={ this.props.grid_size } />\n                : null }\n\n                { this.props.use_stage\n                ?   <div className=\"carousel__content\">\n                        <div className=\"carousel__content-image\">\n                            <Media\n                                type={ this.props.use_stage ? \"stage\" : \"\"}\n                                src={ this.props.data[ this.state.active_index ].image }\n                            />\n                        </div>\n\n                        { this.props.data[ this.state.active_index ].description\n                        ?   <div className=\"carousel__content-text\">\n                                <h3>{ this.props.data[ this.state.active_index ].title }</h3>\n                                <p>{ this.props.data[ this.state.active_index ].description }</p>\n                                <p><strong>Role:</strong> { this.props.data[ this.state.active_index ].role }</p>\n\n                                { this.props.data[ this.state.active_index ].url\n                                ?   <a target=\"_blank\" href={ this.props.data[ this.state.active_index ].url }>View</a>\n                                :   null }\n                            </div>\n                        : null }\n                    </div>\n                : <div ref=\"main_slides\" className=\"main-slides\">{ mainSlidesHTML }</div> }\n\n                <div ref=\"nav_slides\" className=\"nav-slides\">{ listItemsHTML }</div>\n                \n            </div>\n\t\t);\t\t\n\t}\n}\n\nexport default Carousel;","import React from 'react';\nimport * as THREE from 'three';\nimport { TweenMax, Expo } from 'gsap';\n\nconst NUM_PARTICLES_PER_LINE = 500;\n\nclass Lines extends React.Component {\n\n\n\tconstructor(props) {\n        super(props);\n\n        this.grid = this.constructGridCurves(props.grid_size.width, props.grid_size.height, props.grid_size.depth);\n        var array_size = props.grid_size.width * props.grid_size.height * props.grid_size.depth;\n\n       \n        var particlePositions = new Float32Array( NUM_PARTICLES_PER_LINE * 3 * array_size );\n        var particleScales = new Float32Array( NUM_PARTICLES_PER_LINE * array_size);\n        var particleOpacities = new Float32Array( NUM_PARTICLES_PER_LINE * array_size);\n\n\n        for (var path_index in this.grid.concat) {\n\n            var spacedPositions = this.grid.concat[ path_index ].getSpacedPoints(NUM_PARTICLES_PER_LINE);\n            \n            // var indexMin = path_index * NUM_PARTICLES_PER_LINE;\n\n            // row 0 = 0 to 299 and 0 to 899\n            // row 1 = 300 to 599 and 900 to 1799\n            // row 2 = 600 to 899 and 1800 to 2699\n            // row x = 300 * x to 300 * (x + 1) - 1 and 300 * 3 * x to \n            var base_index = NUM_PARTICLES_PER_LINE * path_index;\n            for (var i = 0; i < NUM_PARTICLES_PER_LINE; i++) {\n                \n                var pos_index = (3 * base_index) + ( 3 * i );\n                particlePositions[ pos_index ] = spacedPositions[i].x + this.randomNumberGenerator(-.5, .5);\n                particlePositions[ pos_index + 1] = spacedPositions[i].y + this.randomNumberGenerator(-.5, .5);\n                particlePositions[ pos_index + 2] = spacedPositions[i].z + this.randomNumberGenerator(-.5, .5);\n    \n                particleScales[ base_index + i ] = this.randomNumberGenerator(.2, .5);\n                particleOpacities[ base_index + i ] = this.randomNumberGenerator(.2, 1);\n            }\n        }\n\n        \n        var geometry = new THREE.BufferGeometry();\n        geometry.setAttribute( 'position', new THREE.BufferAttribute( particlePositions, 3 ) );\n        geometry.setAttribute( 'scale', new THREE.BufferAttribute( particleScales, 1 ) );\n        geometry.setAttribute( 'opacity', new THREE.BufferAttribute( particleOpacities, 1 ) );\n\n\n        var material = new THREE.ShaderMaterial( {\n\n            uniforms: {\n                color: { value: new THREE.Color( \"grey\" ) }\n            },\n            vertexShader: this.vertexShader(),\n            fragmentShader: this.fragmentShader(),\n            transparent: true\n\n        } );\n\n        // var material = new THREE.PointsMaterial({\n        //     color: 0xFFFFFF,\n        //     size: .5,\n        //     transparent: true,\n        //     blending: THREE.AdditiveBlending,\n        //   });\n\n        this.particles = new THREE.Points( geometry, material );\n        //this.particles.position.y = props.grid_size.height / 2;\n\n        this.props.box.add( this.particles );        \n    }\n\n    constructGridCurves = (width, height, depth) => {\n        var grid = {\n            horizontals: [],\n            verticals: [],\n            concat: []\n        }\n\n        for (var i = 0; i < height; i++) {\n            var point_a = new THREE.Vector3( -width / 2, i - height / 2, -depth / 2);\n            var point_b = new THREE.Vector3( width / 2, i - height / 2, -depth / 2);\n            var point_c = new THREE.Vector3( width / 2 , i - height / 2, depth / 2);\n            var point_d = new THREE.Vector3( -width / 2 , i - height / 2, depth / 2);\n\n            var path = new THREE.CurvePath();\n            path.add(new THREE.LineCurve3(point_a, point_b));\n            path.add(new THREE.LineCurve3(point_b, point_c));\n            path.add(new THREE.LineCurve3(point_c, point_d));\n            path.add(new THREE.LineCurve3(point_d, point_a));\n            grid.horizontals[i] = path;\n\n        }\n\n        for (var i = 0; i < width; i++) {\n            var point_a = new THREE.Vector3( i - width / 2, -height / 2, -depth / 2);\n            var point_b = new THREE.Vector3( i - width / 2, height / 2, -depth / 2);\n            var point_c = new THREE.Vector3( i - width / 2 , height / 2, depth / 2);\n            var point_d = new THREE.Vector3( i - width / 2 , -height / 2, depth / 2);\n\n            var path = new THREE.CurvePath();\n            path.add(new THREE.LineCurve3(point_a, point_b));\n            path.add(new THREE.LineCurve3(point_b, point_c));\n            path.add(new THREE.LineCurve3(point_c, point_d));\n            path.add(new THREE.LineCurve3(point_d, point_a));\n            grid.verticals[i] = path;\n        }\n\n        for (var i = 0; i < depth; i++) {\n            var point_a = new THREE.Vector3( width / 2, height / 2, i - depth / 2);\n            var point_b = new THREE.Vector3( width / 2, -height / 2, i - depth / 2);\n            var point_c = new THREE.Vector3( -width / 2 , -height / 2, i - depth / 2);\n            var point_d = new THREE.Vector3( -width / 2 , height / 2, i - depth / 2);\n\n            var path = new THREE.CurvePath();\n            path.add(new THREE.LineCurve3(point_a, point_b));\n            path.add(new THREE.LineCurve3(point_b, point_c));\n            path.add(new THREE.LineCurve3(point_c, point_d));\n            path.add(new THREE.LineCurve3(point_d, point_a));\n            grid.verticals[i + width] = path;\n        }\n\n        grid.concat = grid.horizontals.concat( grid.verticals );\n\n        return grid;\n    }\n\n    randomNumberGenerator = (a, b) => {\n        var random = a + Math.random() * (b - a)\n        return random;\n    }\n\n    vertexShader = () => {\n        return `\n            attribute float scale;\n            attribute float opacity;\n\n            // attributes can only be passed to vertex shaders.  but variables can be sent from vertex to fragment using varying\n            varying float vOpacity;\n\n            void main() {\n\n                vOpacity = opacity;\n\n                vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n                gl_PointSize = scale * ( 300.0 / - mvPosition.z );\n\n                gl_Position = projectionMatrix * mvPosition;\n\n            }\n        `;\n    }\n\n    fragmentShader = () => {\n        return `\n            uniform vec3 color;\n            \n            varying float vOpacity;\n\n            void main() {\n                // this is what makes it a circle\n                if ( length( gl_PointCoord - vec2( 0.5, 0.5 ) ) > 0.475 ) discard;\n\n                gl_FragColor = vec4( color, vOpacity );\n\n            }\n        `;\n    }\n\n    componentDidMount() {\n        this.initAni();\n    }\n\n    initAni = () => {\n        var particles_position = this.particles.geometry.attributes.position.array;\n        var particles_scale = this.particles.geometry.attributes.scale.array;\n\n        \n\n        for (var path_index in this.grid.concat) {\n\n            var spacedPositions = this.grid.concat[ path_index ].getSpacedPoints(NUM_PARTICLES_PER_LINE);\n            \n            var base_index = NUM_PARTICLES_PER_LINE * path_index;\n            for (var i = 0; i < NUM_PARTICLES_PER_LINE; i++) {\n\n                var delay = i * .02 + (path_index * .1);\n\n                TweenMax.from(particles_scale, .5, {\n                    [ base_index + i ]: 0,\n                    delay: delay,\n                    yoyo: true,\n                    repeat: -1,\n                    repeatDelay: 1,\n                    onUpdate: () => { //every time the animation frame updates!!\n                        this.particles.geometry.attributes.scale.needsUpdate = true;\n                    }\n                });\n\n                var pos_index = (3 * base_index) + ( 3 * i );\n\n                TweenMax.to(particles_position, .5, {\n                    [ pos_index ]: spacedPositions[i].x,\n                    [ pos_index + 1 ]: spacedPositions[i].y,\n                    [ pos_index + 2 ]: spacedPositions[i].z,\n                    delay: delay,\n                    yoyo: true,\n                    repeat: -1,\n                    repeatDelay: 1,\n                    onUpdate: () => { //every time the animation frame updates!!\n                        this.particles.geometry.attributes.position.needsUpdate = true;\n                    }\n                });\n    \n                \n            }\n        }        \n    }\n\n    restingAni = () => {\n        var particles = this.particles.geometry.attributes.position.array;\n\n        for (var path_index in this.grid.concat) {\n\n            var spacedPositions = this.grid.concat[ path_index ].getSpacedPoints(NUM_PARTICLES_PER_LINE);\n            \n            var base_index = NUM_PARTICLES_PER_LINE * path_index;\n            for (var i = 0; i < NUM_PARTICLES_PER_LINE; i++) {\n                \n                var pos_index = (3 * base_index) + ( 3 * i );\n\n                TweenMax.to(particles, .5, {\n                    [ pos_index ]: spacedPositions[i].x,\n                    [ pos_index + 1 ]: spacedPositions[i].y,\n                    [ pos_index + 2 ]: spacedPositions[i].z,\n                    delay: i * .02 + (path_index * .5),\n                    yoyo: true,\n                    repeat: -1,\n                    repeatDelay: 2,\n                    onUpdate: () => { //every time the animation frame updates!!\n                        this.particles.geometry.attributes.position.needsUpdate = true;\n                    }\n                });\n    \n                \n            }\n        }\n    }\n\n\n\trender() {\n\t\treturn null;\t\t\n\t}\n}\n\nexport default Lines;","import React from 'react';\nimport * as THREE from 'three';\nimport Carousel from './Carousel';\nimport Lines from './Lines';\nimport { TimelineLite } from 'gsap/gsap-core';\n\nimport '../styles/partials/_box.scss';\n\n\nclass Box extends React.Component {\n\n    state = {\n        grid_size: {\n            width: 16,\n            height: 12,\n            depth: 16\n        }\n    }\n\n\tconstructor(props) {\n        super(props);\n\n        // 1. set up background\n        var box_geo = new THREE.BoxBufferGeometry(this.state.grid_size.width , this.state.grid_size.height, this.state.grid_size.depth);\n        var box_mesh = new THREE.MeshPhongMaterial({color: \"white\", side: THREE.BackSide, opacity: 0.5, transparent: true});\n        this.box = new THREE.Mesh(box_geo, box_mesh);\n        //box.position.y = this.state.grid_size.height / 2;\n        this.box.position.set(props.data.position.x, props.data.position.y, props.data.position.z);\n        this.box.rotation.y = props.data.position.rotation;\n        this.box.receiveShadow = true;\n        props.functions.addToScene( this.box );\n\n        // 3. set up light\n        this.light = new THREE.PointLight( \"black\", 1, 16 );\n        this.light.castShadow = true;\n        this.light.position.set(props.data.position.x, props.data.position.y, props.data.position.z);\n        props.functions.addToScene( this.light) ;\n\n    }\n\n    componentDidMount() {\n\n        var colors = [new THREE.Color(\"orange\"), new THREE.Color(\"purple\"), new THREE.Color(\"blue\"), new THREE.Color(\"red\")];\n        var i = this.props.index;\n        var timeline = new TimelineLite({repeat: -1});\n        timeline\n            .to(this.light.color, 5, { r: colors[ i % colors.length ].r, g: colors[ i % colors.length ].g, b: colors[ i % colors.length ].b })\n            .to(this.light.color, 5, { r: colors[ (i+1) % colors.length ].r, g: colors[ (i+1) % colors.length ].g, b: colors[ (i+1) % colors.length ].b })\n            .to(this.light.color, 5, { r: colors[ (i+2) % colors.length ].r, g: colors[ (i+2) % colors.length ].g, b: colors[ (i+2) % colors.length ].b })\n            .to(this.light.color, 5, { r: colors[ (i+3) % colors.length ].r, g: colors[ (i+3) % colors.length ].g, b: colors[ (i+3) % colors.length ].b })\n            .to(this.light.color, 5, { r: 0, g: 0, b: 0 })        \n    }\n\n    componentDidUpdate(prevProps) {\n        \n        // 1. add title to box\n        var text_geo = new THREE.TextGeometry( this.props.data.title, {\n            font: this.props.font,\n            size: 1,\n            height: .8,\n            curveSegments: 8,\n            bevelEnabled: true,\n            bevelThickness: 0.05,\n            bevelSize: 0.05,\n            bevelOffset: 0.01,\n            bevelSegments: 1\n        } );\n\n        var text_mat = new THREE.MeshPhongMaterial({color:\"white\"});\n        var text = new THREE.Mesh(text_geo, text_mat);\n        text.position.set( (this.state.grid_size.width / -2) + 1, this.state.grid_size.height / -2, (this.state.grid_size.depth / -2) + .5);\n        this.box.add(text);\n\n        if (this.props.isActive) {\n            this.calculateCameraPosition(new THREE.Vector3(-2,-2,9));\n        }\n    }\n\n    calculateCameraPosition = (cameraPositionFromBoxOrigin) => {\n\n        var cameraRotation = {\n            x: 0,\n            y: this.props.data.position.rotation - 0.34,\n            z: 0\n        };\n\n        var worldPosition = this.box.localToWorld( cameraPositionFromBoxOrigin );\n\n        console.log( worldPosition );\n        this.props.functions.moveCameraTo( worldPosition, cameraRotation )\n\n        // this.moveCameraTo\n    }\n\n    render() {\n\n\t\treturn (\n\t\t\t<div ref=\"component\" className={\"box\" + (this.props.isActive ? \" box--active\" : \"\") } >\n                <Lines box={ this.box } grid_size={ this.state.grid_size }/>\n                \n\n                {/* { this.props.data.subtitle ?\n                    <div className=\"content text-box subtitle\" dangerouslySetInnerHTML={{__html: this.props.data.subtitle}}></div>\n                : null }\n\n                { this.props.data.description ?\n                    <div className=\"content text-box\" dangerouslySetInnerHTML={{__html: this.props.data.description}}></div>\n                : null }\n\n                { this.props.data.projects ?\n                    <Carousel key={\"carousel\" + this.props.data } box={ this.box } data={ this.props.data.projects } grid_size={ this.state.grid_size }/>\n                : null } */}\n\n\n            </div>\n\t\t);\t\t\n\t}\n}\n\nexport default Box;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport Box from './Box';\nimport '../styles/partials/_scene.scss';\n\nimport PAGES from '../data/pages.json';\nimport { TweenMax, Expo } from 'gsap/gsap-core';\nimport DatGui, { DatBoolean, DatColor, DatNumber, DatString } from 'react-dat-gui';\nimport 'react-dat-gui/dist/index.css';\n\n\nclass Scene extends React.Component {\n\n    state = {\n        grid_size: {\n            width: 16,\n            height: 12,\n            depth: 16\n        },\n        font: null,\n        datgui: {\n            position: {x: 0, y: 16, z: 0},\n            lookAt: {x: 0, y: 4, z: 0}            \n        }\n    }\n\n\tconstructor(props) {\n        super(props);\n\n        // 1. set up renderer\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.shadowMapEnabled = true;\n        this.scene = new THREE.Scene();\n\n        // 2. set up camera\n        \n        this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 100);\n        this.camera.userData = { prevPosition: new THREE.Vector3(), prevRotation: new THREE.Vector3() };\n        this.camera.position.set(3, 16, 4);\n        this.camera.lookAt(3,0,2)\n        //this.scene.background = new THREE.Color( 0xffffff );\n        this.scene.add(this.camera);\n\n        if (props.controls) {\n            var controls = new OrbitControls( this.camera, this.renderer.domElement );\n            controls.target.set(0,4,0);\n        }\n\n        // 3. maybe turn off when light turns black\n        var ambientLight = new THREE.AmbientLight(\"white\", .15);\n        this.scene.add(ambientLight);\n\n    }\n\n    componentDidMount() {\n        this.refs.component.appendChild(this.renderer.domElement);\n\n\n        // 3. load font\n        new THREE.FontLoader().load( 'fonts/helvetiker.json', ( font ) => {\n            this.setState({font: font});\n        } );\n\n        this.animate();\n    }\n\n    componentDidUpdate( prevProps, prevState ) {\n        // 1. move to menu view is menu is toggled open\n        if (this.props.isMenuOpen && !prevProps.isMenuOpen) {\n            var menuPosition = {x: 0, y: 42, z: 0};\n            var menuRotation = {x: -1.570795326794897, y: 0, z: 0};\n            this.moveCameraTo(menuPosition, menuRotation)\n        }\n\n        // 2. move back to previous position if menu is closed and url is not changed\n        else if (!this.props.isMenuOpen && prevProps.isMenuOpen\n            && (this.props.match.params.box_title == prevProps.match.params.box_title)) {\n            console.log(\"did update\", prevState, this.state);\n\n            this.camera.position.set( this.camera.userData.prevPosition.x, this.camera.userData.prevPosition.y, this.camera.userData.prevPosition.z );\n            this.camera.rotation.set( this.camera.userData.prevRotation.x, this.camera.userData.prevRotation.y, this.camera.userData.prevRotation.z );\n\n        }\n    }\n\n    animate = (delta) => {\n        requestAnimationFrame(this.animate);\n        \n        this.renderer.render(this.scene, this.camera);\n    }\n\n    addToScene = (obj) => {\n        this.scene.add( obj );\n    }\n\n    moveCameraTo = (position, rotation) => {\n        this.camera.userData.prevPosition.copy( this.camera.position );\n        this.camera.userData.prevRotation.copy( this.camera.rotation );\n\n        TweenMax.to(this.camera.position, 2, {x: position.x, y: position.y, z: position.z, ease: Expo.easeInOut});\n        TweenMax.to(this.camera.rotation, 2, {x: rotation.x, y: rotation.y, z: rotation.z, ease: Expo.easeOut, delay: 2});\n    }\n\n    onUpdateDatGui = (newData) => {\n\n        this.setState(prevState => ({\n            datgui: { ...prevState.datgui, ...newData }\n        }));\n\n        this.camera.position.set(newData.position.x, newData.position.y, newData.position.z);\n        this.camera.lookAt(newData.lookAt.x, newData.lookAt.y, newData.lookAt.z)\n    }\n\n\trender() {\n\n        var boxHTML = [];\n        for (var i in PAGES) {\n            // 1. check which param was passed in url\n            if (this.props.match) {\n            var is_active = this.props.match.params.box_title\n                && PAGES[i].title.toLowerCase() == this.props.match.params.box_title.toLowerCase()\n                && !this.props.isMenuOpen;\n            }\n\n            boxHTML.push(\n                <Box\n                    key={ \"box\" + i }\n                    index={ parseInt(i) }\n                    isActive={ is_active }\n                    data={ PAGES[i] }\n                    font={ this.state.font }\n                    functions={ { addToScene: this.addToScene, moveCameraTo: this.moveCameraTo } }\n                />\n            );\n        }\n        \n        const { datgui } = this.state\n\n\t\treturn (\n            <React.Fragment>\n                {/* <DatGui data={ datgui } onUpdate={this.onUpdateDatGui}>\n\n                    <DatNumber path='position.x' min={0} max={100} step={1} />\n                    <DatNumber path='position.y' min={0} max={100} step={1} />\n                    <DatNumber path='position.z' min={0} max={100} step={1} />\n\n                </DatGui> */}\n\t\t\t<div ref=\"component\" className=\"scene\">\n                { boxHTML }\n            </div>\n            </React.Fragment>\n\t\t);\t\t\n\t}\n}\n\nexport default Scene;","import React from 'react';\n\nimport Carousel from './Carousel';\nimport Scene from './Scene'\nimport Media from './Media'\n\nimport DATA from '../data/pages.json';\n\nclass Page extends React.Component {\n\n\n    componentDidMount() {    \n\n    }\n\n\n\n\n    render() {\n\n\t\treturn (\n            <React.Fragment>\n                <Scene></Scene>\n                <h1>Betina Dalope</h1>\n                <p>Philadelphia, PA</p>\n\n                <h2>Contact</h2>\n                <p><strong>Email: </strong> betina.devwork@gmail.com</p>\n                <p><strong>LinkedIn: </strong>https://www.linkedin.com/in/mbetina/</p>\n\n                <h2>Work</h2>\n                \n                <Carousel data={ DATA[1].projects } use_stage/>\n\n                <h2>Prototypes</h2>\n\n                <Carousel data={ DATA[2].projects } use_stage/>\n\n                <h2>Music and Sound Design</h2>\n\n            </React.Fragment>\n            \n\t\t);\t\t\n\t}\n}\n\nexport default Page;","import React from 'react';\nimport Media from './Media';\n\n\n\nclass Gallery extends React.Component {\n\n    state = {\n\n    }\n\n\trender() {\n    \n        var itemsHTML = [];\n        for (var i in this.props.data) {\n            itemsHTML.push(\n                <li className={ this.props.data[i].featured ? \"featured\" : \"\"}>\n                    <Media {...this.props.data[i]} />\n                    {/* <div className=\"gallery__text\">\n                        <p>{ this.props.data[i].tech }</p>\n                    </div> */}\n                </li>\n            );\n        }\n\n\t\treturn (\n\n            <div ref=\"component\" className=\"gallery\">\n                <ul>\n                    { itemsHTML }\n                </ul>\n            </div>\n\n\t\t);\t\t\n\t}\n}\n\nexport default Gallery;","import React from 'react';\n\nimport Carousel from './Carousel';\nimport Gallery from './Gallery'\n\nimport DATA from '../data/pages.json';\n\nclass Page extends React.Component {\n\n\n    componentDidMount() {    \n        document.getElementsByTagName(\"BODY\")[0].classList.add( \"basic-page\" );\n    }\n\n\n\n\n    render() {\n\n\t\treturn (\n            <React.Fragment>\n                <h1>Betina Dalope</h1>\n                <p>Philadelphia, PA</p>\n\n                <h2>Contact</h2>\n                <p><strong>Email: </strong> betina.devwork@gmail.com</p>\n                <p><strong>LinkedIn: </strong>https://www.linkedin.com/in/mbetina/</p>\n\n                <h2>Work</h2>\n                \n                <Carousel data={ DATA[1].projects }/>\n\n                <h2>Prototypes</h2>\n                <p>designed using Vectr and Illustrator</p>\n                <p>programmed using Three.js, Gsap, React.js, and Sass (CSS)</p>\n\n                <Gallery data={ DATA[2].gallery }/>\n\n            </React.Fragment>\n            \n\t\t);\t\t\n\t}\n}\n\nexport default Page;","import React from 'react';\nimport { BrowserRouter, Switch, Route, Link, withRouter } from 'react-router-dom';\n\nimport PixelColorTest from './components/PixelColorTest';\nimport AverageColorTest from './components/AverageColorTest';\nimport Page from './components/Page';\nimport BasicPage from './components/BasicPage';\nimport Scene from './components/Scene';\n\nimport './styles/App.scss';\n\nimport PAGES from './data/pages.json'\n\nclass App extends React.Component {\n\n\tstate = {\n\t\tisMenuOpen: false\n\t}\n\n\tonMenuToggleClick = (event) => {\n\t\tthis.setState({ isMenuOpen: !this.state.isMenuOpen });\n\t}\n\n\trender() {\n\t\tvar menuItemsHTML = [];\n\t\tfor (var i in PAGES) {\n\t\t\tmenuItemsHTML.push(\n\n\t\t\t\t<li><Link to={\"/initial-scene\" + PAGES[i].title.toLowerCase()} onClick={ this.onMenuToggleClick }>{ PAGES[i].title }</Link></li>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={BasicPage}/>\n\t\t\t\t\t<Route exact path='/portfolio' component={BasicPage}/>\n\t\t\t\t\t<Route exact path='/initial-scene' render={(props) =>\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<nav className={ \"menu\" + (this.state.isMenuOpen ? \" menu--open\" : \"\") }>\n\t\t\t\t\t\t\t<h1 id=\"menu-title\" className=\"u-sr-only\">Menu</h1>\n\t\t\t\t\t\t\t<button className=\"toggle\" onClick={ this.onMenuToggleClick }>Menu</button>\n\t\t\t\t\t\t\t<ul aria-labelledby=\"menu-title\">\n\t\t\t\t\t\t\t\t{ menuItemsHTML }\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t<Scene {...props} isMenuOpen={ this.state.isMenuOpen } controls/>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t} />\n\t\t\t\t\t<Route path='/test-1' component={PixelColorTest} />\n\t\t\t\t\t<Route path='/test-2' component={AverageColorTest} />\n\t\t\t\t\t<Route path='/page' component={Page}/>\n\t\t\t\t\t<Route path='/initial-scene/:box_title' render={(props) => <Scene {...props} isMenuOpen={ this.state.isMenuOpen } />} />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App; // so we can access the location\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}